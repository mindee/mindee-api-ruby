# Stubs for the origami library.
# This one _should_ exist, but it would take too long, so this is a stub.
module Origami
  def compile: (Hash[Symbol, untyped]) -> void
  class Array
    def each: { (untyped) -> untyped } -> untyped
  end
  class PDF
    def self.read: (StringIO | File) -> untyped
    def initialize: () -> void
    def append_page: (Page) -> void
    def delete_pages_at: (::Array[Integer]) -> void
    def pages: () -> ::Array[Page]
    def save: (StringIO | File) -> void
    def to_io_stream: -> StringIO
    class LinearParser
      def initialize: (Hash[Symbol, untyped]) -> void
      def new: (Hash[Symbol, untyped]) -> void
      def parse: (StringIO | File?) -> PDF
    end
  end

  class Page
    def initialize: () -> void
    def add_xobject: (Graphics::ImageXObject, String) -> untyped
    def Contents: (?untyped?) -> untyped
    def Contents=: (?untyped?, untyped?) -> untyped
    def []: (untyped) -> untyped
    def []=: (untyped, untyped) -> bool
  end

  module Graphics
    class ImageXObject
      def initialize: () -> void

      def BitsPerComponent=: (Integer) -> untyped
      def ColorSpace=: (Symbol) -> untyped
      def dictionary: () -> Hash[Symbol, untyped]
      def data=: (StringIO) -> untyped
      def self.from_image_file: (StringIO, String) -> untyped
      def Height=: (Integer | Float) -> untyped
      def Width=: (Integer | Float) -> untyped
    end
  end

  class InvalidPDFError < StandardError
  end

  class Parser
    VERBOSE_QUIET: String
  end

  class Stream
    def initialize: (?String) -> untyped
    def data : () -> untyped
    def data= : (String | StringIO) -> void
    def dictionary : -> Hash[Symbol, untyped]
  end
end